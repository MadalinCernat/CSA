     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     3                                  ; a - byte, b - word
     4                                  ; (b / a * 2 + 10) * b - b * 15;
     5                                  ; ex. 1: a = 10; b = 40; Result: (40 / 10 * 2 + 10) * 40 - 40 * 15 = 18 * 40 - 1600 = 720 - 600 = 120
     6                                  ; ex. 2: a = 100; b = 50; Result: (50 / 100 * 2 + 10) * 50 - 50 * 15 = 12 * 50 - 750 = 600 - 750 = - 150
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 0A                          a db 10
    20 00000001 2800                        b dw 40
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ;(b / a * 2 + 10) * b - b * 15;
    26                                          
    27                                          ;b / a
    28 00000000 66A1[01000000]                  mov AX, [b]
    29 00000006 F635[00000000]                  div byte [a] ; AX/a -> AL%a->AH; AL=b/a-
    30 0000000C B702                            mov BH, 2
    31 0000000E F6E7                            mul BH ; AL*BH -> AX = b / a * 2
    32                                          
    33 00000010 6683C00A                        add AX, 10 ; AX = b/a*2 + 10
    34                                          
    35 00000014 66F725[01000000]                mul word [b] ; AX*b = ()*b -> DX:AX -> EBX
    36 0000001B 6652                            push DX
    37 0000001D 6650                            push AX
    38 0000001F 5B                              pop EBX
    39                                          
    40                                          
    41                                          ; b * 15 = word * word AX
    42 00000020 66B80F00                        mov AX, 15
    43 00000024 66F725[01000000]                mul word [b] ; DX:AX = b*15
    44 0000002B 6652                            push DX
    45 0000002D 6650                            push AX
    46 0000002F 58                              pop EAX ; EAX = b*15
    47 00000030 29C3                            sub EBX, EAX ; EBX = final result
    48                                          
    49 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
