     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 0E00                        e dw 14
    15 00000003 0500                        h dw 5
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; 100/(e+h-3*a)
    21                                          ; a - byte
    22                                          ; e, h - word
    23                                          
    24 00000000 668B1D[01000000]                mov BX, [e]
    25 00000007 66031D[03000000]                add BX, [h] ; BX = e + h
    26                                          
    27 0000000E B003                            mov AL, 3
    28 00000010 F625[00000000]                  mul byte [a] ; AX = 3 * a
    29                                          
    30 00000016 6629C3                          sub BX, AX ; BX = e + h - 3 * a 
    31                                          
    32 00000019 66B86400                        mov AX, 100
    33 0000001D 66BA0000                        mov DX, 0 ; DX:AX = 100
    34                                          
    35 00000021 66F7F3                          div BX ; AX = 100 / (e + h - 3 * a)
    36                                      
    37                                          ; exit(0)
    38 00000024 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 00000026 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
