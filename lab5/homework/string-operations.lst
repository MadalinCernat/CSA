     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 010306020302                s1 db 1, 3, 6, 2, 3, 2
    14                                      ls1 equ $-s1
    15 00000006 060308010205                s2 db 6, 3, 8, 1, 2, 5
    16                                      ls2 equ $-s2
    17 0000000C 00<rept>                    d times ls1 db 0
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; Two byte strings S1 and S2 of the same length are given. Obtain the string D where each element is the sum of the corresponding elements from S1 and S2
    22                                          ;S1: 1, 3, 6, 2, 3, 2
    23                                          ;S2: 6, 3, 8, 1, 2, 5
    24                                          ;D: 7, 6, 14, 3, 5, 7
    25 00000000 B906000000                      mov ECX, ls1
    26 00000005 BE00000000                      mov ESI, 0
    27 0000000A E315                            jecxz Sfarsit
    28                                          Repeta:
    29 0000000C 8A86[00000000]                          mov AL, [s1+ESI]
    30 00000012 0286[06000000]                          add AL, [s2+ESI] ; add the numbers on the same position
    31 00000018 8886[0C000000]                          mov [d+ESI], AL ; move the result to the new string
    32 0000001E 46                                      inc ESI
    33 0000001F E2EB                            loop Repeta
    34                                          Sfarsit:
    35                                  
    36                                          ; exit(0)
    37 00000021 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000023 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
