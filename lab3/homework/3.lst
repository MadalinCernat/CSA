     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     3                                  global start        
     4                                  
     5                                  ; declare external functions needed by our program
     6                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     7                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     8                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     9                                  
    10                                  ; our data is declared here (the variables needed by our program)
    11                                  segment data use32 class=data
    12 00000000 0A00                        a dw 10
    13 00000002 05                          b db 5
    14 00000003 05                          c db 5
    15 00000004 14000000                    e dd 20
    16 00000008 0F00000000000000            x dq 15
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; a*b-(100-c)/(b*b)+e+x; a-word; b,c-byte; e-doubleword; x-qword
    22                                          
    23 00000000 A0[02000000]                    mov AL, [b]
    24 00000005 6698                            cbw
    25                                          
    26 00000007 668B1D[00000000]                mov BX, [a]
    27 0000000E 66F7EB                          imul BX ; DX: AX = a * b
    28                                          
    29 00000011 6652                            push DX
    30 00000013 6650                            push AX
    31                                          
    32 00000015 B064                            mov AL, 100
    33 00000017 2A05[03000000]                  sub AL, [c]
    34 0000001D 6698                            cbw
    35 0000001F 6699                            cwd ; DX:AX = 100 - c
    36                                          
    37 00000021 6689D1                          mov CX, DX
    38 00000024 6689C3                          mov BX, AX ; CX:BX = 100 - c
    39                                          
    40 00000027 A0[02000000]                    mov AL, [b]
    41 0000002C F62D[02000000]                  imul byte [b] ; AX = b * b
    42                                          
    43 00000032 6650                            push AX
    44 00000034 6689CA                          mov DX, CX
    45 00000037 6689D8                          mov AX, BX ; DX: AX = 100 - c
    46                                          
    47 0000003A 665B                            pop BX
    48                                          
    49 0000003C 66F7FB                          idiv BX ; AX = (100-c) / (b*b)
    50                                          
    51 0000003F 5B                              pop EBX
    52                                          
    53 00000040 98                              cwde
    54                                          
    55 00000041 29C3                            sub EBX, EAX ; EBX = a * b - (100-c) / (b*b)
    56                                          
    57 00000043 031D[04000000]                  add EBX, [e]
    58 00000049 89D8                            mov EAX, EBX
    59 0000004B 99                              cdq
    60                                          
    61 0000004C 0305[08000000]                  add EAX, [x]
    62 00000052 1315[0C000000]                  adc EDX, [x+4]
    63                                          
    64                                          
    65                                          ; exit(0)
    66 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
