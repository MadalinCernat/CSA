     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 5777                         a dw 0111011101010111b
    14 00000002 00000000                     b dd 0
    15                                           ; 0101101111110000 0000111011100011
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; Given the word A,obtain the doubleword B as follows:
    21                                  
    22                                              
    23 00000000 66BB0000                        mov BX, 0 ;we compute the result in CX:BX
    24 00000004 66B90000                        mov CX, 0
    25                                          
    26                                          ;the bits 0-3 of B are the same as the bits 1-4 of the result A XOR 0Ah
    27 00000008 66A1[00000000]                  mov AX, [a]
    28 0000000E 6683F00A                        xor AX, 0Ah ; A XOR 0Ah
    29 00000012 B101                            mov CL, 1
    30 00000014 66D3C8                          ror AX, CL ;rotate 1 position to right
    31 00000017 6609C3                          or BX, AX ;put the bits into the result
    32                                          
    33                                          ;the bits 4-11 of B are the same as the bits 7-14 of A
    34 0000001A 66A1[00000000]                  mov AX, [a]
    35 00000020 6625807F                        and AX, 0111111110000000b ;isolate bits 7-14 of A
    36 00000024 B103                            mov CL, 3
    37 00000026 66D3C8                          ror AX, CL ;rotate 3 positions to right
    38 00000029 6609C3                          or BX, AX ;put the bits into the result
    39                                          
    40                                          ;the bits 12-19 of B have the value 0
    41 0000002C 6681E3FF0F                      and BX, 0000111111111111b ;force bits 12-15 to the value 0
    42 00000031 6683E1F0                        and CX, 1111111111110000b ;force bits 16-19 to the value 0
    43                                          
    44                                          ;the bits 20-25 of B have the value 1
    45 00000035 6681C9F003                      or CX, 0000001111110000b ;force bits 20-25 to value 1
    46                                          
    47                                          ;the bits 26-31 of B are the same as the bits 3-8 of A complemented
    48 0000003A 66A1[00000000]                  mov AX, [a]
    49 00000040 66F7D0                          not AX
    50 00000043 6683C001                        add AX, 1
    51 00000047 6625F801                        and AX, 0000000111111000b;isolate bits 3-8 of A
    52 0000004B B107                            mov CL, 7
    53 0000004D 66D3C0                          rol AX, CL ;rotate 7 positions to left
    54 00000050 6609C1                          or CX, AX ;put the bits into the result
    55                                          
    56                                          ;move the result from the register to the result variable  
    57 00000053 66890D[02000000]                mov [b], CX
    58 0000005A 66891D[04000000]                mov [b+2], BX
    59                                          
    60                                          
    61                                          ; exit(0)
    62 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
